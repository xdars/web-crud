package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"log"

	"github.com/aidarkhanov/nanoid"
	database "github.com/xdars/web-crud/db"
	"github.com/xdars/web-crud/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	db, err := database.GetDatabase()
	if err != nil {
		log.Println(err)
		return nil, err
	}
	defer db.Close()
	id := nanoid.New()
	db.CreateUser(id, input.FirstName, input.LastName)

	return &model.User{ID: id, FirstName: input.FirstName, LastName: input.LastName}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	db, err := database.GetDatabase()
	if err != nil {
		log.Println(err)
		return nil, err
	}
	defer db.Close()
	user := new(model.User)
	db.GetUser(id, user)
	return user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	db, err := database.GetDatabase()
	if err != nil {
		log.Println(err)
		return nil, err
	}
	var users []*model.User
	db.GetUsers(&users)
	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
